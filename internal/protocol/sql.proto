syntax = "proto3";

package protocol;

// Interface exported by a gRPC SQL gateway.
service SQL {
  rpc Conn(stream Request) returns (stream Response);
}

// A single request targeted to a certain SQL connection.
message Request {
  RequestCode code = 1; // Code identifying the type of request, see below.
  bytes data = 2;       // Serialized request, maps to one of the RequestXXX messages.
}

// RequestCode is a numberic code identifying the SQL gRPC request to
// handle.
enum RequestCode {
  OPEN       = 0;
  PREPARE    = 1;
  EXEC       = 2;
  QUERY      = 3;
  NEXT       = 4;
  ROWS_CLOSE = 5;
  STMT_CLOSE = 6;
  BEGIN      = 7;
  COMMIT     = 8;
  ROLLBACK   = 9;
  CLOSE      = 10;

  // XXX error codes should be part of a separate ResponseCode enum.
  SQLITE_ERROR = 11;
}

message RequestOpen {
  string name = 1; //  Data source name to pass to the SQL driver.
}

message RequestPrepare {
  string query = 1;
}

message RequestExec {
  int64 id = 1;            // ID of the prepared statement.
  repeated Value args = 2; // Arguments to bind to the statement.
}

message RequestQuery {
  int64 id = 1;            // ID of the prepared statement.
  repeated Value args = 2; // Arguments to bind to the statement.
}

message RequestNext {
  int64 id = 1;  // ID of the rows object.
  int64 len = 2; // Number of columns to fetch.
}

message RequestRowsClose {
  int64 id = 1;  // ID of the rows object.
}

message RequestStmtClose {
  int64 id = 1; // ID of the prepared statement.
}

message RequestBegin {
}

message RequestCommit {
  int64 id = 1;       // Numeric identifier of the transaction.
}

message RequestRollback {
  int64 id = 1;       // Numeric identifier of the transaction.
}

message RequestClose {
}

// A single response to a request.
message Response {
  RequestCode code = 1; // Code identifying the type of the request this response is for, see below.
  bytes data = 2;       // Serialized response, maps to one of the ResponseXXX messages.
}

message ResponseOpen {
}

message ResponsePrepare {
  int64 id = 1;       // Numeric identifier of the new statement.
  int64 numInput = 2; // Number of placeholder parameters.
}

message ResponseExec {
  int64 LastInsertId = 1;
  int64 RowsAffected = 2;
}

message ResponseQuery {
  int64 id = 1;                // Numeric identifier of the new rows result set.
  repeated string columns = 2; // Names of the columns in the result set.
}

message ResponseNext {
  bool eof = 1;
  repeated Value values = 2; // Column values.
}

message ResponseRowsClose {
}

message ResponseStmtClose {
}

message ResponseBegin {
  int64 id = 1; // ID of the newly created transaction.
}

message ResponseCommit {
}

message ResponseRollback {
}

message ResponseClose {
}

message ResponseSQLiteError {
  int32 code = 1;
  int32 extended_code = 2;
  string err = 3;
}


// Value of a single statement argument or row column.
message Value {
  ValueCode code = 1; // Code identifying the type of the value, see below.
  bytes data = 2;     // Serialized value, maps to one of the ValueXXX messages.
}

// ValueCode is a numberic code identifying the Go type of a value.
//
// It supports all types that should be handle by driver.Value in database/sql/driver.
enum ValueCode {
  INT64   = 0;
  FLOAT64 = 1;
  BOOL    = 2;
  BYTES   = 3;
  STRING  = 4;
  TIME    = 5;
  NULL    = 6;
}

message ValueInt64 {
  int64 value = 1;
}

message ValueFloat64 {
  double value = 1;
}

message ValueBool {
  bool value = 1;
}

message ValueBytes {
  bytes value = 1;
}

message ValueString {
  string value = 1;
}

message ValueTime {
  int64 value = 1;
}

message ValueNull {
}
