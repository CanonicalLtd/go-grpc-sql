// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql.proto

/*
	Package sql is a generated protocol buffer package.

	It is generated from these files:
		sql.proto

	It has these top-level messages:
		Client
		Duration
		Server
		Cluster
		Database
		Conn
		SQL
		Stmt
		Tx
		BoundStmt
		BoundSQL
		Result
		Rows
		Row
		Column
		NamedValue
		Value
		Null
		Int64
		Float64
		Bool
		Bytes
		String
		Time
		Type
		TypeName
		Token
		Empty
		Error
*/
package sql

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Type_Code int32

const (
	INT64   Type_Code = 0
	FLOAT64 Type_Code = 1
	BOOL    Type_Code = 2
	BYTES   Type_Code = 3
	STRING  Type_Code = 4
	TIME    Type_Code = 5
	NULL    Type_Code = 6
)

var Type_Code_name = map[int32]string{
	0: "INT64",
	1: "FLOAT64",
	2: "BOOL",
	3: "BYTES",
	4: "STRING",
	5: "TIME",
	6: "NULL",
}
var Type_Code_value = map[string]int32{
	"INT64":   0,
	"FLOAT64": 1,
	"BOOL":    2,
	"BYTES":   3,
	"STRING":  4,
	"TIME":    5,
	"NULL":    6,
}

func (Type_Code) EnumDescriptor() ([]byte, []int) { return fileDescriptorSql, []int{24, 0} }

// Client holds information about a gRPC SQL client.
type Client struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Client) Reset()                    { *m = Client{} }
func (*Client) ProtoMessage()               {}
func (*Client) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{0} }

func (m *Client) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Duration represents a certain amount of time in nano seconds.
type Duration struct {
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Duration) Reset()                    { *m = Duration{} }
func (*Duration) ProtoMessage()               {}
func (*Duration) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{1} }

func (m *Duration) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Server holds information about a gRPC SQL server.
type Server struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *Server) Reset()                    { *m = Server{} }
func (*Server) ProtoMessage()               {}
func (*Server) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{2} }

func (m *Server) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// Cluster holds a list of gRPC SQL servers that form a cluster.
type Cluster struct {
	Servers []*Server `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
}

func (m *Cluster) Reset()                    { *m = Cluster{} }
func (*Cluster) ProtoMessage()               {}
func (*Cluster) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{3} }

func (m *Cluster) GetServers() []*Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

// Database connection parameters.
type Database struct {
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Database) Reset()                    { *m = Database{} }
func (*Database) ProtoMessage()               {}
func (*Database) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{4} }

func (m *Database) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *Database) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Conn references a database connection on a given gateway service.
type Conn struct {
	Id ConnID `protobuf:"varint,1,opt,name=id,proto3,casttype=ConnID" json:"id,omitempty"`
}

func (m *Conn) Reset()                    { *m = Conn{} }
func (*Conn) ProtoMessage()               {}
func (*Conn) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{5} }

func (m *Conn) GetId() ConnID {
	if m != nil {
		return m.Id
	}
	return 0
}

// SQL holds the text of an SQL statement to prepare on a given connection.
type SQL struct {
	ConnId ConnID `protobuf:"varint,1,opt,name=conn_id,json=connId,proto3,casttype=ConnID" json:"conn_id,omitempty"`
	Text   string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *SQL) Reset()                    { *m = SQL{} }
func (*SQL) ProtoMessage()               {}
func (*SQL) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{6} }

func (m *SQL) GetConnId() ConnID {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func (m *SQL) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// Stmt references a prepared statement on a given connection.
type Stmt struct {
	ConnId   ConnID `protobuf:"varint,1,opt,name=conn_id,json=connId,proto3,casttype=ConnID" json:"conn_id,omitempty"`
	Id       StmtID `protobuf:"varint,2,opt,name=id,proto3,casttype=StmtID" json:"id,omitempty"`
	NumInput int32  `protobuf:"varint,3,opt,name=num_input,json=numInput,proto3" json:"num_input,omitempty"`
}

func (m *Stmt) Reset()                    { *m = Stmt{} }
func (*Stmt) ProtoMessage()               {}
func (*Stmt) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{7} }

func (m *Stmt) GetConnId() ConnID {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func (m *Stmt) GetId() StmtID {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Stmt) GetNumInput() int32 {
	if m != nil {
		return m.NumInput
	}
	return 0
}

// Tx references a transaction on a given connection.
type Tx struct {
	ConnId ConnID `protobuf:"varint,1,opt,name=conn_id,json=connId,proto3,casttype=ConnID" json:"conn_id,omitempty"`
	Id     TxID   `protobuf:"varint,2,opt,name=id,proto3,casttype=TxID" json:"id,omitempty"`
}

func (m *Tx) Reset()                    { *m = Tx{} }
func (*Tx) ProtoMessage()               {}
func (*Tx) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{8} }

func (m *Tx) GetConnId() ConnID {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func (m *Tx) GetId() TxID {
	if m != nil {
		return m.Id
	}
	return 0
}

// BoundStmt is used to execute a given prepared statement.
type BoundStmt struct {
	ConnId      ConnID        `protobuf:"varint,1,opt,name=conn_id,json=connId,proto3,casttype=ConnID" json:"conn_id,omitempty"`
	StmtId      StmtID        `protobuf:"varint,2,opt,name=stmt_id,json=stmtId,proto3,casttype=StmtID" json:"stmt_id,omitempty"`
	NamedValues []*NamedValue `protobuf:"bytes,3,rep,name=named_values,json=namedValues" json:"named_values,omitempty"`
}

func (m *BoundStmt) Reset()                    { *m = BoundStmt{} }
func (*BoundStmt) ProtoMessage()               {}
func (*BoundStmt) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{9} }

func (m *BoundStmt) GetConnId() ConnID {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func (m *BoundStmt) GetStmtId() StmtID {
	if m != nil {
		return m.StmtId
	}
	return 0
}

func (m *BoundStmt) GetNamedValues() []*NamedValue {
	if m != nil {
		return m.NamedValues
	}
	return nil
}

// BoundSQL is used to prepare and execute a statement with a single RPC.
type BoundSQL struct {
	ConnId      ConnID        `protobuf:"varint,1,opt,name=conn_id,json=connId,proto3,casttype=ConnID" json:"conn_id,omitempty"`
	Text        string        `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	NamedValues []*NamedValue `protobuf:"bytes,3,rep,name=named_values,json=namedValues" json:"named_values,omitempty"`
}

func (m *BoundSQL) Reset()                    { *m = BoundSQL{} }
func (*BoundSQL) ProtoMessage()               {}
func (*BoundSQL) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{10} }

func (m *BoundSQL) GetConnId() ConnID {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func (m *BoundSQL) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *BoundSQL) GetNamedValues() []*NamedValue {
	if m != nil {
		return m.NamedValues
	}
	return nil
}

// Result of a statement execution.
type Result struct {
	LastInsertId int64 `protobuf:"varint,1,opt,name=last_insert_id,json=lastInsertId,proto3" json:"last_insert_id,omitempty"`
	RowsAffected int64 `protobuf:"varint,2,opt,name=rows_affected,json=rowsAffected,proto3" json:"rows_affected,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{11} }

func (m *Result) GetLastInsertId() int64 {
	if m != nil {
		return m.LastInsertId
	}
	return 0
}

func (m *Result) GetRowsAffected() int64 {
	if m != nil {
		return m.RowsAffected
	}
	return 0
}

// Rows references a result set of a query.
type Rows struct {
	ConnId  ConnID   `protobuf:"varint,1,opt,name=conn_id,json=connId,proto3,casttype=ConnID" json:"conn_id,omitempty"`
	Id      RowsID   `protobuf:"varint,2,opt,name=id,proto3,casttype=RowsID" json:"id,omitempty"`
	Columns []string `protobuf:"bytes,3,rep,name=columns" json:"columns,omitempty"`
}

func (m *Rows) Reset()                    { *m = Rows{} }
func (*Rows) ProtoMessage()               {}
func (*Rows) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{12} }

func (m *Rows) GetConnId() ConnID {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func (m *Rows) GetId() RowsID {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Rows) GetColumns() []string {
	if m != nil {
		return m.Columns
	}
	return nil
}

// Row is a single row yielded by the result set of a query statement.
type Row struct {
	Columns []*Value `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
}

func (m *Row) Reset()                    { *m = Row{} }
func (*Row) ProtoMessage()               {}
func (*Row) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{13} }

func (m *Row) GetColumns() []*Value {
	if m != nil {
		return m.Columns
	}
	return nil
}

// Column references is a single column on given result set.
type Column struct {
	ConnId ConnID `protobuf:"varint,1,opt,name=conn_id,json=connId,proto3,casttype=ConnID" json:"conn_id,omitempty"`
	RowsId RowsID `protobuf:"varint,2,opt,name=rows_id,json=rowsId,proto3,casttype=RowsID" json:"rows_id,omitempty"`
	Index  int32  `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *Column) Reset()                    { *m = Column{} }
func (*Column) ProtoMessage()               {}
func (*Column) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{14} }

func (m *Column) GetConnId() ConnID {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func (m *Column) GetRowsId() RowsID {
	if m != nil {
		return m.RowsId
	}
	return 0
}

func (m *Column) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

// NamedValue is the value of a single parameter in prepared statement.
type NamedValue struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ordinal int32  `protobuf:"varint,2,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	Value   *Value `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *NamedValue) Reset()                    { *m = NamedValue{} }
func (*NamedValue) ProtoMessage()               {}
func (*NamedValue) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{15} }

func (m *NamedValue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NamedValue) GetOrdinal() int32 {
	if m != nil {
		return m.Ordinal
	}
	return 0
}

func (m *NamedValue) GetValue() *Value {
	if m != nil {
		return m.Value
	}
	return nil
}

// Value is the value of a single parameter in prepared statement or in a row column.
type Value struct {
	// Types that are valid to be assigned to Type:
	//	*Value_Null
	//	*Value_Int64
	//	*Value_Float64
	//	*Value_Bool
	//	*Value_Bytes
	//	*Value_String_
	//	*Value_Time
	Type isValue_Type `protobuf_oneof:"type"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{16} }

type isValue_Type interface {
	isValue_Type()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Value_Null struct {
	Null *Null `protobuf:"bytes,1,opt,name=null,oneof"`
}
type Value_Int64 struct {
	Int64 *Int64 `protobuf:"bytes,2,opt,name=int64,oneof"`
}
type Value_Float64 struct {
	Float64 *Float64 `protobuf:"bytes,3,opt,name=float64,oneof"`
}
type Value_Bool struct {
	Bool *Bool `protobuf:"bytes,4,opt,name=bool,oneof"`
}
type Value_Bytes struct {
	Bytes *Bytes `protobuf:"bytes,5,opt,name=bytes,oneof"`
}
type Value_String_ struct {
	String_ *String `protobuf:"bytes,6,opt,name=string,oneof"`
}
type Value_Time struct {
	Time *Time `protobuf:"bytes,7,opt,name=time,oneof"`
}

func (*Value_Null) isValue_Type()    {}
func (*Value_Int64) isValue_Type()   {}
func (*Value_Float64) isValue_Type() {}
func (*Value_Bool) isValue_Type()    {}
func (*Value_Bytes) isValue_Type()   {}
func (*Value_String_) isValue_Type() {}
func (*Value_Time) isValue_Type()    {}

func (m *Value) GetType() isValue_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Value) GetNull() *Null {
	if x, ok := m.GetType().(*Value_Null); ok {
		return x.Null
	}
	return nil
}

func (m *Value) GetInt64() *Int64 {
	if x, ok := m.GetType().(*Value_Int64); ok {
		return x.Int64
	}
	return nil
}

func (m *Value) GetFloat64() *Float64 {
	if x, ok := m.GetType().(*Value_Float64); ok {
		return x.Float64
	}
	return nil
}

func (m *Value) GetBool() *Bool {
	if x, ok := m.GetType().(*Value_Bool); ok {
		return x.Bool
	}
	return nil
}

func (m *Value) GetBytes() *Bytes {
	if x, ok := m.GetType().(*Value_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (m *Value) GetString_() *String {
	if x, ok := m.GetType().(*Value_String_); ok {
		return x.String_
	}
	return nil
}

func (m *Value) GetTime() *Time {
	if x, ok := m.GetType().(*Value_Time); ok {
		return x.Time
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Value_OneofMarshaler, _Value_OneofUnmarshaler, _Value_OneofSizer, []interface{}{
		(*Value_Null)(nil),
		(*Value_Int64)(nil),
		(*Value_Float64)(nil),
		(*Value_Bool)(nil),
		(*Value_Bytes)(nil),
		(*Value_String_)(nil),
		(*Value_Time)(nil),
	}
}

func _Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Value)
	// type
	switch x := m.Type.(type) {
	case *Value_Null:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Null); err != nil {
			return err
		}
	case *Value_Int64:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Int64); err != nil {
			return err
		}
	case *Value_Float64:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Float64); err != nil {
			return err
		}
	case *Value_Bool:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bool); err != nil {
			return err
		}
	case *Value_Bytes:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bytes); err != nil {
			return err
		}
	case *Value_String_:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.String_); err != nil {
			return err
		}
	case *Value_Time:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Time); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Value.Type has unexpected type %T", x)
	}
	return nil
}

func _Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Value)
	switch tag {
	case 1: // type.null
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Null)
		err := b.DecodeMessage(msg)
		m.Type = &Value_Null{msg}
		return true, err
	case 2: // type.int64
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Int64)
		err := b.DecodeMessage(msg)
		m.Type = &Value_Int64{msg}
		return true, err
	case 3: // type.float64
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Float64)
		err := b.DecodeMessage(msg)
		m.Type = &Value_Float64{msg}
		return true, err
	case 4: // type.bool
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Bool)
		err := b.DecodeMessage(msg)
		m.Type = &Value_Bool{msg}
		return true, err
	case 5: // type.bytes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Bytes)
		err := b.DecodeMessage(msg)
		m.Type = &Value_Bytes{msg}
		return true, err
	case 6: // type.string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(String)
		err := b.DecodeMessage(msg)
		m.Type = &Value_String_{msg}
		return true, err
	case 7: // type.time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Time)
		err := b.DecodeMessage(msg)
		m.Type = &Value_Time{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Value)
	// type
	switch x := m.Type.(type) {
	case *Value_Null:
		s := proto.Size(x.Null)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_Int64:
		s := proto.Size(x.Int64)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_Float64:
		s := proto.Size(x.Float64)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_Bool:
		s := proto.Size(x.Bool)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_Bytes:
		s := proto.Size(x.Bytes)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_String_:
		s := proto.Size(x.String_)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_Time:
		s := proto.Size(x.Time)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Null struct {
}

func (m *Null) Reset()                    { *m = Null{} }
func (*Null) ProtoMessage()               {}
func (*Null) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{17} }

type Int64 struct {
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Int64) Reset()                    { *m = Int64{} }
func (*Int64) ProtoMessage()               {}
func (*Int64) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{18} }

func (m *Int64) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Float64 struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Float64) Reset()                    { *m = Float64{} }
func (*Float64) ProtoMessage()               {}
func (*Float64) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{19} }

func (m *Float64) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Bool struct {
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Bool) Reset()                    { *m = Bool{} }
func (*Bool) ProtoMessage()               {}
func (*Bool) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{20} }

func (m *Bool) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type Bytes struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Bytes) Reset()                    { *m = Bytes{} }
func (*Bytes) ProtoMessage()               {}
func (*Bytes) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{21} }

func (m *Bytes) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type String struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *String) Reset()                    { *m = String{} }
func (*String) ProtoMessage()               {}
func (*String) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{22} }

func (m *String) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Time struct {
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Time) Reset()                    { *m = Time{} }
func (*Time) ProtoMessage()               {}
func (*Time) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{23} }

func (m *Time) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Type is a numerical code identifying the type of a Value
type Type struct {
	Code Type_Code `protobuf:"varint,1,opt,name=code,proto3,enum=sql.Type_Code" json:"code,omitempty"`
}

func (m *Type) Reset()                    { *m = Type{} }
func (*Type) ProtoMessage()               {}
func (*Type) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{24} }

func (m *Type) GetCode() Type_Code {
	if m != nil {
		return m.Code
	}
	return INT64
}

// TypeName is the name of the declared type of certain column in a Rows result
// set.
type TypeName struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *TypeName) Reset()                    { *m = TypeName{} }
func (*TypeName) ProtoMessage()               {}
func (*TypeName) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{25} }

func (m *TypeName) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Token is returned in case of a possibly transient error upon transaction
// commit or rollback, and should be presented by the client to another gateway
// service to attempt to complete the operation.
type Token struct {
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{26} }

func (m *Token) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Empty response message
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{27} }

// Hold information about a driver error. This modeled against SQLite errors.
type Error struct {
	Code         int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	ExtendedCode int64  `protobuf:"varint,2,opt,name=extended_code,json=extendedCode,proto3" json:"extended_code,omitempty"`
	Message      string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptorSql, []int{28} }

func (m *Error) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetExtendedCode() int64 {
	if m != nil {
		return m.ExtendedCode
	}
	return 0
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Client)(nil), "sql.Client")
	proto.RegisterType((*Duration)(nil), "sql.Duration")
	proto.RegisterType((*Server)(nil), "sql.Server")
	proto.RegisterType((*Cluster)(nil), "sql.Cluster")
	proto.RegisterType((*Database)(nil), "sql.Database")
	proto.RegisterType((*Conn)(nil), "sql.Conn")
	proto.RegisterType((*SQL)(nil), "sql.SQL")
	proto.RegisterType((*Stmt)(nil), "sql.Stmt")
	proto.RegisterType((*Tx)(nil), "sql.Tx")
	proto.RegisterType((*BoundStmt)(nil), "sql.BoundStmt")
	proto.RegisterType((*BoundSQL)(nil), "sql.BoundSQL")
	proto.RegisterType((*Result)(nil), "sql.Result")
	proto.RegisterType((*Rows)(nil), "sql.Rows")
	proto.RegisterType((*Row)(nil), "sql.Row")
	proto.RegisterType((*Column)(nil), "sql.Column")
	proto.RegisterType((*NamedValue)(nil), "sql.NamedValue")
	proto.RegisterType((*Value)(nil), "sql.Value")
	proto.RegisterType((*Null)(nil), "sql.Null")
	proto.RegisterType((*Int64)(nil), "sql.Int64")
	proto.RegisterType((*Float64)(nil), "sql.Float64")
	proto.RegisterType((*Bool)(nil), "sql.Bool")
	proto.RegisterType((*Bytes)(nil), "sql.Bytes")
	proto.RegisterType((*String)(nil), "sql.String")
	proto.RegisterType((*Time)(nil), "sql.Time")
	proto.RegisterType((*Type)(nil), "sql.Type")
	proto.RegisterType((*TypeName)(nil), "sql.TypeName")
	proto.RegisterType((*Token)(nil), "sql.Token")
	proto.RegisterType((*Empty)(nil), "sql.Empty")
	proto.RegisterType((*Error)(nil), "sql.Error")
	proto.RegisterEnum("sql.Type_Code", Type_Code_name, Type_Code_value)
}
func (x Type_Code) String() string {
	s, ok := Type_Code_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Client) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Client)
	if !ok {
		that2, ok := that.(Client)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Duration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Duration)
	if !ok {
		that2, ok := that.(Duration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Server) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Server)
	if !ok {
		that2, ok := that.(Server)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	return true
}
func (this *Cluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cluster)
	if !ok {
		that2, ok := that.(Cluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Servers) != len(that1.Servers) {
		return false
	}
	for i := range this.Servers {
		if !this.Servers[i].Equal(that1.Servers[i]) {
			return false
		}
	}
	return true
}
func (this *Database) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Database)
	if !ok {
		that2, ok := that.(Database)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientId != that1.ClientId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *Conn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Conn)
	if !ok {
		that2, ok := that.(Conn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *SQL) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SQL)
	if !ok {
		that2, ok := that.(SQL)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConnId != that1.ConnId {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	return true
}
func (this *Stmt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Stmt)
	if !ok {
		that2, ok := that.(Stmt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConnId != that1.ConnId {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.NumInput != that1.NumInput {
		return false
	}
	return true
}
func (this *Tx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tx)
	if !ok {
		that2, ok := that.(Tx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConnId != that1.ConnId {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *BoundStmt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BoundStmt)
	if !ok {
		that2, ok := that.(BoundStmt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConnId != that1.ConnId {
		return false
	}
	if this.StmtId != that1.StmtId {
		return false
	}
	if len(this.NamedValues) != len(that1.NamedValues) {
		return false
	}
	for i := range this.NamedValues {
		if !this.NamedValues[i].Equal(that1.NamedValues[i]) {
			return false
		}
	}
	return true
}
func (this *BoundSQL) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BoundSQL)
	if !ok {
		that2, ok := that.(BoundSQL)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConnId != that1.ConnId {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if len(this.NamedValues) != len(that1.NamedValues) {
		return false
	}
	for i := range this.NamedValues {
		if !this.NamedValues[i].Equal(that1.NamedValues[i]) {
			return false
		}
	}
	return true
}
func (this *Result) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Result)
	if !ok {
		that2, ok := that.(Result)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LastInsertId != that1.LastInsertId {
		return false
	}
	if this.RowsAffected != that1.RowsAffected {
		return false
	}
	return true
}
func (this *Rows) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Rows)
	if !ok {
		that2, ok := that.(Rows)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConnId != that1.ConnId {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Columns) != len(that1.Columns) {
		return false
	}
	for i := range this.Columns {
		if this.Columns[i] != that1.Columns[i] {
			return false
		}
	}
	return true
}
func (this *Row) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Row)
	if !ok {
		that2, ok := that.(Row)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Columns) != len(that1.Columns) {
		return false
	}
	for i := range this.Columns {
		if !this.Columns[i].Equal(that1.Columns[i]) {
			return false
		}
	}
	return true
}
func (this *Column) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column)
	if !ok {
		that2, ok := that.(Column)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConnId != that1.ConnId {
		return false
	}
	if this.RowsId != that1.RowsId {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	return true
}
func (this *NamedValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NamedValue)
	if !ok {
		that2, ok := that.(NamedValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Ordinal != that1.Ordinal {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value)
	if !ok {
		that2, ok := that.(Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Type == nil {
		if this.Type != nil {
			return false
		}
	} else if this.Type == nil {
		return false
	} else if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (this *Value_Null) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_Null)
	if !ok {
		that2, ok := that.(Value_Null)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Null.Equal(that1.Null) {
		return false
	}
	return true
}
func (this *Value_Int64) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_Int64)
	if !ok {
		that2, ok := that.(Value_Int64)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Int64.Equal(that1.Int64) {
		return false
	}
	return true
}
func (this *Value_Float64) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_Float64)
	if !ok {
		that2, ok := that.(Value_Float64)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Float64.Equal(that1.Float64) {
		return false
	}
	return true
}
func (this *Value_Bool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_Bool)
	if !ok {
		that2, ok := that.(Value_Bool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bool.Equal(that1.Bool) {
		return false
	}
	return true
}
func (this *Value_Bytes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_Bytes)
	if !ok {
		that2, ok := that.(Value_Bytes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bytes.Equal(that1.Bytes) {
		return false
	}
	return true
}
func (this *Value_String_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_String_)
	if !ok {
		that2, ok := that.(Value_String_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.String_.Equal(that1.String_) {
		return false
	}
	return true
}
func (this *Value_Time) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Value_Time)
	if !ok {
		that2, ok := that.(Value_Time)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Time.Equal(that1.Time) {
		return false
	}
	return true
}
func (this *Null) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Null)
	if !ok {
		that2, ok := that.(Null)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Int64) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Int64)
	if !ok {
		that2, ok := that.(Int64)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Float64) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Float64)
	if !ok {
		that2, ok := that.(Float64)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Bool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bool)
	if !ok {
		that2, ok := that.(Bool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Bytes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bytes)
	if !ok {
		that2, ok := that.(Bytes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (this *String) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*String)
	if !ok {
		that2, ok := that.(String)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Time) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Time)
	if !ok {
		that2, ok := that.(Time)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Type) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Type)
	if !ok {
		that2, ok := that.(Type)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *TypeName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TypeName)
	if !ok {
		that2, ok := that.(TypeName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Token) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Token)
	if !ok {
		that2, ok := that.(Token)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Empty) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Empty)
	if !ok {
		that2, ok := that.(Empty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Error)
	if !ok {
		that2, ok := that.(Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.ExtendedCode != that1.ExtendedCode {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *Client) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sql.Client{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Duration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sql.Duration{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Server) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sql.Server{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Cluster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sql.Cluster{")
	if this.Servers != nil {
		s = append(s, "Servers: "+fmt.Sprintf("%#v", this.Servers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Database) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sql.Database{")
	s = append(s, "ClientId: "+fmt.Sprintf("%#v", this.ClientId)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Conn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sql.Conn{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SQL) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sql.SQL{")
	s = append(s, "ConnId: "+fmt.Sprintf("%#v", this.ConnId)+",\n")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Stmt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sql.Stmt{")
	s = append(s, "ConnId: "+fmt.Sprintf("%#v", this.ConnId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "NumInput: "+fmt.Sprintf("%#v", this.NumInput)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tx) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sql.Tx{")
	s = append(s, "ConnId: "+fmt.Sprintf("%#v", this.ConnId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BoundStmt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sql.BoundStmt{")
	s = append(s, "ConnId: "+fmt.Sprintf("%#v", this.ConnId)+",\n")
	s = append(s, "StmtId: "+fmt.Sprintf("%#v", this.StmtId)+",\n")
	if this.NamedValues != nil {
		s = append(s, "NamedValues: "+fmt.Sprintf("%#v", this.NamedValues)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BoundSQL) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sql.BoundSQL{")
	s = append(s, "ConnId: "+fmt.Sprintf("%#v", this.ConnId)+",\n")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	if this.NamedValues != nil {
		s = append(s, "NamedValues: "+fmt.Sprintf("%#v", this.NamedValues)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Result) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sql.Result{")
	s = append(s, "LastInsertId: "+fmt.Sprintf("%#v", this.LastInsertId)+",\n")
	s = append(s, "RowsAffected: "+fmt.Sprintf("%#v", this.RowsAffected)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Rows) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sql.Rows{")
	s = append(s, "ConnId: "+fmt.Sprintf("%#v", this.ConnId)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Columns: "+fmt.Sprintf("%#v", this.Columns)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Row) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sql.Row{")
	if this.Columns != nil {
		s = append(s, "Columns: "+fmt.Sprintf("%#v", this.Columns)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Column) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sql.Column{")
	s = append(s, "ConnId: "+fmt.Sprintf("%#v", this.ConnId)+",\n")
	s = append(s, "RowsId: "+fmt.Sprintf("%#v", this.RowsId)+",\n")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NamedValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sql.NamedValue{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Ordinal: "+fmt.Sprintf("%#v", this.Ordinal)+",\n")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&sql.Value{")
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Value_Null) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sql.Value_Null{` +
		`Null:` + fmt.Sprintf("%#v", this.Null) + `}`}, ", ")
	return s
}
func (this *Value_Int64) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sql.Value_Int64{` +
		`Int64:` + fmt.Sprintf("%#v", this.Int64) + `}`}, ", ")
	return s
}
func (this *Value_Float64) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sql.Value_Float64{` +
		`Float64:` + fmt.Sprintf("%#v", this.Float64) + `}`}, ", ")
	return s
}
func (this *Value_Bool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sql.Value_Bool{` +
		`Bool:` + fmt.Sprintf("%#v", this.Bool) + `}`}, ", ")
	return s
}
func (this *Value_Bytes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sql.Value_Bytes{` +
		`Bytes:` + fmt.Sprintf("%#v", this.Bytes) + `}`}, ", ")
	return s
}
func (this *Value_String_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sql.Value_String_{` +
		`String_:` + fmt.Sprintf("%#v", this.String_) + `}`}, ", ")
	return s
}
func (this *Value_Time) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sql.Value_Time{` +
		`Time:` + fmt.Sprintf("%#v", this.Time) + `}`}, ", ")
	return s
}
func (this *Null) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&sql.Null{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Int64) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sql.Int64{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Float64) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sql.Float64{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Bool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sql.Bool{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Bytes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sql.Bytes{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *String) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sql.String{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Time) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sql.Time{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Type) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sql.Type{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TypeName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sql.TypeName{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Token) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sql.Token{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Empty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&sql.Empty{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sql.Error{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "ExtendedCode: "+fmt.Sprintf("%#v", this.ExtendedCode)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSql(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Gateway service

type GatewayClient interface {
	// Leader returns the current leader of the cluster this gRPC SQL gateway is
	// part of.
	Leader(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Server, error)
	// Register a new client, which can then start opening connections. Return
	// the timeout after which all client connections will be killed if no
	// heartbeat is received from the client.
	//
	// This API is idempotent and it's okay to call it again for the same client.
	Register(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Duration, error)
	// Heartbeat is a stream that must be kept alive by clients in order to
	// prevent their connections from being killed, and to receive updates about
	// available gateway servers in the cluster.
	Heartbeat(ctx context.Context, opts ...grpc.CallOption) (Gateway_HeartbeatClient, error)
	// Connect to a SQL database exposed over gRPC and return a new connection.
	Connect(ctx context.Context, in *Database, opts ...grpc.CallOption) (*Conn, error)
	// Prepare a new statement within a transaction.
	Prepare(ctx context.Context, in *SQL, opts ...grpc.CallOption) (*Stmt, error)
	// Begin a new transaction on the given connection.
	Begin(ctx context.Context, in *Conn, opts ...grpc.CallOption) (*Tx, error)
	// Exec executes a prepared statement and returns a Result object.
	Exec(ctx context.Context, in *BoundStmt, opts ...grpc.CallOption) (*Result, error)
	// ExecSQL prepares and executes a statement with parameters, and
	// returns a Result object.
	ExecSQL(ctx context.Context, in *BoundSQL, opts ...grpc.CallOption) (*Result, error)
	// Query executes a prepared statement and returns a Rows object.
	Query(ctx context.Context, in *BoundStmt, opts ...grpc.CallOption) (*Rows, error)
	// Next returns the next row in a Rows object.
	Next(ctx context.Context, in *Rows, opts ...grpc.CallOption) (*Row, error)
	// ColumnTypeScanType returns the type of certain column for the current row
	// pointed by a Rows object.
	ColumnTypeScanType(ctx context.Context, in *Column, opts ...grpc.CallOption) (*Type, error)
	// ColumnTypeDatabaseTypeName returns the name of the type of certain column
	// in a Rows object.
	ColumnTypeDatabaseTypeName(ctx context.Context, in *Column, opts ...grpc.CallOption) (*TypeName, error)
	// Commit a transaction.
	Commit(ctx context.Context, in *Tx, opts ...grpc.CallOption) (*Token, error)
	// Rollback a transaction.
	Rollback(ctx context.Context, in *Tx, opts ...grpc.CallOption) (*Empty, error)
	// Recover a possibly committed transaction.
	Recover(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error)
	// Close a prepared statement.
	CloseStmt(ctx context.Context, in *Stmt, opts ...grpc.CallOption) (*Empty, error)
	// Close a Rows result set.
	CloseRows(ctx context.Context, in *Rows, opts ...grpc.CallOption) (*Empty, error)
	// Close a SQL connection.
	Close(ctx context.Context, in *Conn, opts ...grpc.CallOption) (*Empty, error)
}

type gatewayClient struct {
	cc *grpc.ClientConn
}

func NewGatewayClient(cc *grpc.ClientConn) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) Leader(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := grpc.Invoke(ctx, "/sql.Gateway/Leader", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Register(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Duration, error) {
	out := new(Duration)
	err := grpc.Invoke(ctx, "/sql.Gateway/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Heartbeat(ctx context.Context, opts ...grpc.CallOption) (Gateway_HeartbeatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Gateway_serviceDesc.Streams[0], c.cc, "/sql.Gateway/Heartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayHeartbeatClient{stream}
	return x, nil
}

type Gateway_HeartbeatClient interface {
	Send(*Client) error
	Recv() (*Cluster, error)
	grpc.ClientStream
}

type gatewayHeartbeatClient struct {
	grpc.ClientStream
}

func (x *gatewayHeartbeatClient) Send(m *Client) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gatewayHeartbeatClient) Recv() (*Cluster, error) {
	m := new(Cluster)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayClient) Connect(ctx context.Context, in *Database, opts ...grpc.CallOption) (*Conn, error) {
	out := new(Conn)
	err := grpc.Invoke(ctx, "/sql.Gateway/Connect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Prepare(ctx context.Context, in *SQL, opts ...grpc.CallOption) (*Stmt, error) {
	out := new(Stmt)
	err := grpc.Invoke(ctx, "/sql.Gateway/Prepare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Begin(ctx context.Context, in *Conn, opts ...grpc.CallOption) (*Tx, error) {
	out := new(Tx)
	err := grpc.Invoke(ctx, "/sql.Gateway/Begin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Exec(ctx context.Context, in *BoundStmt, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/sql.Gateway/Exec", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ExecSQL(ctx context.Context, in *BoundSQL, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/sql.Gateway/ExecSQL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Query(ctx context.Context, in *BoundStmt, opts ...grpc.CallOption) (*Rows, error) {
	out := new(Rows)
	err := grpc.Invoke(ctx, "/sql.Gateway/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Next(ctx context.Context, in *Rows, opts ...grpc.CallOption) (*Row, error) {
	out := new(Row)
	err := grpc.Invoke(ctx, "/sql.Gateway/Next", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ColumnTypeScanType(ctx context.Context, in *Column, opts ...grpc.CallOption) (*Type, error) {
	out := new(Type)
	err := grpc.Invoke(ctx, "/sql.Gateway/ColumnTypeScanType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ColumnTypeDatabaseTypeName(ctx context.Context, in *Column, opts ...grpc.CallOption) (*TypeName, error) {
	out := new(TypeName)
	err := grpc.Invoke(ctx, "/sql.Gateway/ColumnTypeDatabaseTypeName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Commit(ctx context.Context, in *Tx, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := grpc.Invoke(ctx, "/sql.Gateway/Commit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Rollback(ctx context.Context, in *Tx, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sql.Gateway/Rollback", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Recover(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sql.Gateway/Recover", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CloseStmt(ctx context.Context, in *Stmt, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sql.Gateway/CloseStmt", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CloseRows(ctx context.Context, in *Rows, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sql.Gateway/CloseRows", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Close(ctx context.Context, in *Conn, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sql.Gateway/Close", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gateway service

type GatewayServer interface {
	// Leader returns the current leader of the cluster this gRPC SQL gateway is
	// part of.
	Leader(context.Context, *Empty) (*Server, error)
	// Register a new client, which can then start opening connections. Return
	// the timeout after which all client connections will be killed if no
	// heartbeat is received from the client.
	//
	// This API is idempotent and it's okay to call it again for the same client.
	Register(context.Context, *Client) (*Duration, error)
	// Heartbeat is a stream that must be kept alive by clients in order to
	// prevent their connections from being killed, and to receive updates about
	// available gateway servers in the cluster.
	Heartbeat(Gateway_HeartbeatServer) error
	// Connect to a SQL database exposed over gRPC and return a new connection.
	Connect(context.Context, *Database) (*Conn, error)
	// Prepare a new statement within a transaction.
	Prepare(context.Context, *SQL) (*Stmt, error)
	// Begin a new transaction on the given connection.
	Begin(context.Context, *Conn) (*Tx, error)
	// Exec executes a prepared statement and returns a Result object.
	Exec(context.Context, *BoundStmt) (*Result, error)
	// ExecSQL prepares and executes a statement with parameters, and
	// returns a Result object.
	ExecSQL(context.Context, *BoundSQL) (*Result, error)
	// Query executes a prepared statement and returns a Rows object.
	Query(context.Context, *BoundStmt) (*Rows, error)
	// Next returns the next row in a Rows object.
	Next(context.Context, *Rows) (*Row, error)
	// ColumnTypeScanType returns the type of certain column for the current row
	// pointed by a Rows object.
	ColumnTypeScanType(context.Context, *Column) (*Type, error)
	// ColumnTypeDatabaseTypeName returns the name of the type of certain column
	// in a Rows object.
	ColumnTypeDatabaseTypeName(context.Context, *Column) (*TypeName, error)
	// Commit a transaction.
	Commit(context.Context, *Tx) (*Token, error)
	// Rollback a transaction.
	Rollback(context.Context, *Tx) (*Empty, error)
	// Recover a possibly committed transaction.
	Recover(context.Context, *Token) (*Empty, error)
	// Close a prepared statement.
	CloseStmt(context.Context, *Stmt) (*Empty, error)
	// Close a Rows result set.
	CloseRows(context.Context, *Rows) (*Empty, error)
	// Close a SQL connection.
	Close(context.Context, *Conn) (*Empty, error)
}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_Leader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Leader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql.Gateway/Leader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Leader(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql.Gateway/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Register(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Heartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GatewayServer).Heartbeat(&gatewayHeartbeatServer{stream})
}

type Gateway_HeartbeatServer interface {
	Send(*Cluster) error
	Recv() (*Client, error)
	grpc.ServerStream
}

type gatewayHeartbeatServer struct {
	grpc.ServerStream
}

func (x *gatewayHeartbeatServer) Send(m *Cluster) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gatewayHeartbeatServer) Recv() (*Client, error) {
	m := new(Client)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Gateway_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Database)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql.Gateway/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Connect(ctx, req.(*Database))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql.Gateway/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Prepare(ctx, req.(*SQL))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Begin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Begin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql.Gateway/Begin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Begin(ctx, req.(*Conn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoundStmt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql.Gateway/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Exec(ctx, req.(*BoundStmt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ExecSQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoundSQL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ExecSQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql.Gateway/ExecSQL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ExecSQL(ctx, req.(*BoundSQL))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoundStmt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql.Gateway/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Query(ctx, req.(*BoundStmt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rows)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql.Gateway/Next",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Next(ctx, req.(*Rows))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ColumnTypeScanType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Column)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ColumnTypeScanType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql.Gateway/ColumnTypeScanType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ColumnTypeScanType(ctx, req.(*Column))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ColumnTypeDatabaseTypeName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Column)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ColumnTypeDatabaseTypeName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql.Gateway/ColumnTypeDatabaseTypeName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ColumnTypeDatabaseTypeName(ctx, req.(*Column))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql.Gateway/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Commit(ctx, req.(*Tx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql.Gateway/Rollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Rollback(ctx, req.(*Tx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Recover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Recover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql.Gateway/Recover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Recover(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CloseStmt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stmt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CloseStmt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql.Gateway/CloseStmt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CloseStmt(ctx, req.(*Stmt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CloseRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rows)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CloseRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql.Gateway/CloseRows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CloseRows(ctx, req.(*Rows))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sql.Gateway/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Close(ctx, req.(*Conn))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sql.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Leader",
			Handler:    _Gateway_Leader_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Gateway_Register_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _Gateway_Connect_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _Gateway_Prepare_Handler,
		},
		{
			MethodName: "Begin",
			Handler:    _Gateway_Begin_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _Gateway_Exec_Handler,
		},
		{
			MethodName: "ExecSQL",
			Handler:    _Gateway_ExecSQL_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Gateway_Query_Handler,
		},
		{
			MethodName: "Next",
			Handler:    _Gateway_Next_Handler,
		},
		{
			MethodName: "ColumnTypeScanType",
			Handler:    _Gateway_ColumnTypeScanType_Handler,
		},
		{
			MethodName: "ColumnTypeDatabaseTypeName",
			Handler:    _Gateway_ColumnTypeDatabaseTypeName_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Gateway_Commit_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _Gateway_Rollback_Handler,
		},
		{
			MethodName: "Recover",
			Handler:    _Gateway_Recover_Handler,
		},
		{
			MethodName: "CloseStmt",
			Handler:    _Gateway_CloseStmt_Handler,
		},
		{
			MethodName: "CloseRows",
			Handler:    _Gateway_CloseRows_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Gateway_Close_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Heartbeat",
			Handler:       _Gateway_Heartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sql.proto",
}

func (m *Client) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Client) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSql(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *Duration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Duration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *Server) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Server) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSql(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	return i, nil
}

func (m *Cluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cluster) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Servers) > 0 {
		for _, msg := range m.Servers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSql(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Database) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Database) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClientId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSql(dAtA, i, uint64(len(m.ClientId)))
		i += copy(dAtA[i:], m.ClientId)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSql(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Conn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Conn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *SQL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQL) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConnId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.ConnId))
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSql(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *Stmt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stmt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConnId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.ConnId))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.Id))
	}
	if m.NumInput != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.NumInput))
	}
	return i, nil
}

func (m *Tx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConnId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.ConnId))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *BoundStmt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoundStmt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConnId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.ConnId))
	}
	if m.StmtId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.StmtId))
	}
	if len(m.NamedValues) > 0 {
		for _, msg := range m.NamedValues {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSql(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BoundSQL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoundSQL) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConnId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.ConnId))
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSql(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.NamedValues) > 0 {
		for _, msg := range m.NamedValues {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSql(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Result) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastInsertId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.LastInsertId))
	}
	if m.RowsAffected != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.RowsAffected))
	}
	return i, nil
}

func (m *Rows) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rows) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConnId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.ConnId))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.Id))
	}
	if len(m.Columns) > 0 {
		for _, s := range m.Columns {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Row) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Row) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Columns) > 0 {
		for _, msg := range m.Columns {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSql(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Column) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConnId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.ConnId))
	}
	if m.RowsId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.RowsId))
	}
	if m.Index != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *NamedValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamedValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSql(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Ordinal != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.Ordinal))
	}
	if m.Value != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.Value.Size()))
		n1, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Value) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		nn2, err := m.Type.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *Value_Null) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Null != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.Null.Size()))
		n3, err := m.Null.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Value_Int64) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Int64 != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.Int64.Size()))
		n4, err := m.Int64.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Value_Float64) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Float64 != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.Float64.Size()))
		n5, err := m.Float64.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Value_Bool) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Bool != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.Bool.Size()))
		n6, err := m.Bool.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Value_Bytes) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Bytes != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.Bytes.Size()))
		n7, err := m.Bytes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Value_String_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.String_ != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.String_.Size()))
		n8, err := m.String_.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Value_Time) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Time != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.Time.Size()))
		n9, err := m.Time.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Null) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Null) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Int64) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Int64) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *Float64) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Float64) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i += 8
	}
	return i, nil
}

func (m *Bool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bool) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value {
		dAtA[i] = 0x8
		i++
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Bytes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bytes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSql(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *String) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *String) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSql(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *Time) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Time) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Type) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *TypeName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypeName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSql(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *Token) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Token) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.Code))
	}
	if m.ExtendedCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSql(dAtA, i, uint64(m.ExtendedCode))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSql(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func encodeVarintSql(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedClient(r randySql, easy bool) *Client {
	this := &Client{}
	this.Id = string(randStringSql(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDuration(r randySql, easy bool) *Duration {
	this := &Duration{}
	this.Value = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Value *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedServer(r randySql, easy bool) *Server {
	this := &Server{}
	this.Address = string(randStringSql(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCluster(r randySql, easy bool) *Cluster {
	this := &Cluster{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Servers = make([]*Server, v1)
		for i := 0; i < v1; i++ {
			this.Servers[i] = NewPopulatedServer(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDatabase(r randySql, easy bool) *Database {
	this := &Database{}
	this.ClientId = string(randStringSql(r))
	this.Name = string(randStringSql(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedConn(r randySql, easy bool) *Conn {
	this := &Conn{}
	this.Id = ConnID(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSQL(r randySql, easy bool) *SQL {
	this := &SQL{}
	this.ConnId = ConnID(r.Uint32())
	this.Text = string(randStringSql(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStmt(r randySql, easy bool) *Stmt {
	this := &Stmt{}
	this.ConnId = ConnID(r.Uint32())
	this.Id = StmtID(r.Uint32())
	this.NumInput = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.NumInput *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTx(r randySql, easy bool) *Tx {
	this := &Tx{}
	this.ConnId = ConnID(r.Uint32())
	this.Id = TxID(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBoundStmt(r randySql, easy bool) *BoundStmt {
	this := &BoundStmt{}
	this.ConnId = ConnID(r.Uint32())
	this.StmtId = StmtID(r.Uint32())
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.NamedValues = make([]*NamedValue, v2)
		for i := 0; i < v2; i++ {
			this.NamedValues[i] = NewPopulatedNamedValue(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBoundSQL(r randySql, easy bool) *BoundSQL {
	this := &BoundSQL{}
	this.ConnId = ConnID(r.Uint32())
	this.Text = string(randStringSql(r))
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.NamedValues = make([]*NamedValue, v3)
		for i := 0; i < v3; i++ {
			this.NamedValues[i] = NewPopulatedNamedValue(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedResult(r randySql, easy bool) *Result {
	this := &Result{}
	this.LastInsertId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.LastInsertId *= -1
	}
	this.RowsAffected = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.RowsAffected *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRows(r randySql, easy bool) *Rows {
	this := &Rows{}
	this.ConnId = ConnID(r.Uint32())
	this.Id = RowsID(r.Uint32())
	v4 := r.Intn(10)
	this.Columns = make([]string, v4)
	for i := 0; i < v4; i++ {
		this.Columns[i] = string(randStringSql(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRow(r randySql, easy bool) *Row {
	this := &Row{}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.Columns = make([]*Value, v5)
		for i := 0; i < v5; i++ {
			this.Columns[i] = NewPopulatedValue(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedColumn(r randySql, easy bool) *Column {
	this := &Column{}
	this.ConnId = ConnID(r.Uint32())
	this.RowsId = RowsID(r.Uint32())
	this.Index = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Index *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNamedValue(r randySql, easy bool) *NamedValue {
	this := &NamedValue{}
	this.Name = string(randStringSql(r))
	this.Ordinal = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Ordinal *= -1
	}
	if r.Intn(10) != 0 {
		this.Value = NewPopulatedValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedValue(r randySql, easy bool) *Value {
	this := &Value{}
	oneofNumber_Type := []int32{1, 2, 3, 4, 5, 6, 7}[r.Intn(7)]
	switch oneofNumber_Type {
	case 1:
		this.Type = NewPopulatedValue_Null(r, easy)
	case 2:
		this.Type = NewPopulatedValue_Int64(r, easy)
	case 3:
		this.Type = NewPopulatedValue_Float64(r, easy)
	case 4:
		this.Type = NewPopulatedValue_Bool(r, easy)
	case 5:
		this.Type = NewPopulatedValue_Bytes(r, easy)
	case 6:
		this.Type = NewPopulatedValue_String_(r, easy)
	case 7:
		this.Type = NewPopulatedValue_Time(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedValue_Null(r randySql, easy bool) *Value_Null {
	this := &Value_Null{}
	this.Null = NewPopulatedNull(r, easy)
	return this
}
func NewPopulatedValue_Int64(r randySql, easy bool) *Value_Int64 {
	this := &Value_Int64{}
	this.Int64 = NewPopulatedInt64(r, easy)
	return this
}
func NewPopulatedValue_Float64(r randySql, easy bool) *Value_Float64 {
	this := &Value_Float64{}
	this.Float64 = NewPopulatedFloat64(r, easy)
	return this
}
func NewPopulatedValue_Bool(r randySql, easy bool) *Value_Bool {
	this := &Value_Bool{}
	this.Bool = NewPopulatedBool(r, easy)
	return this
}
func NewPopulatedValue_Bytes(r randySql, easy bool) *Value_Bytes {
	this := &Value_Bytes{}
	this.Bytes = NewPopulatedBytes(r, easy)
	return this
}
func NewPopulatedValue_String_(r randySql, easy bool) *Value_String_ {
	this := &Value_String_{}
	this.String_ = NewPopulatedString(r, easy)
	return this
}
func NewPopulatedValue_Time(r randySql, easy bool) *Value_Time {
	this := &Value_Time{}
	this.Time = NewPopulatedTime(r, easy)
	return this
}
func NewPopulatedNull(r randySql, easy bool) *Null {
	this := &Null{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedInt64(r randySql, easy bool) *Int64 {
	this := &Int64{}
	this.Value = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Value *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFloat64(r randySql, easy bool) *Float64 {
	this := &Float64{}
	this.Value = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Value *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBool(r randySql, easy bool) *Bool {
	this := &Bool{}
	this.Value = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBytes(r randySql, easy bool) *Bytes {
	this := &Bytes{}
	v6 := r.Intn(100)
	this.Value = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.Value[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedString(r randySql, easy bool) *String {
	this := &String{}
	this.Value = string(randStringSql(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTime(r randySql, easy bool) *Time {
	this := &Time{}
	this.Value = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Value *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedType(r randySql, easy bool) *Type {
	this := &Type{}
	this.Code = Type_Code([]int32{0, 1, 2, 3, 4, 5, 6}[r.Intn(7)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTypeName(r randySql, easy bool) *TypeName {
	this := &TypeName{}
	this.Value = string(randStringSql(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedToken(r randySql, easy bool) *Token {
	this := &Token{}
	this.Value = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEmpty(r randySql, easy bool) *Empty {
	this := &Empty{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedError(r randySql, easy bool) *Error {
	this := &Error{}
	this.Code = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.ExtendedCode = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ExtendedCode *= -1
	}
	this.Message = string(randStringSql(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randySql interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSql(r randySql) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSql(r randySql) string {
	v7 := r.Intn(100)
	tmps := make([]rune, v7)
	for i := 0; i < v7; i++ {
		tmps[i] = randUTF8RuneSql(r)
	}
	return string(tmps)
}
func randUnrecognizedSql(r randySql, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSql(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSql(dAtA []byte, r randySql, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSql(dAtA, uint64(key))
		v8 := r.Int63()
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		dAtA = encodeVarintPopulateSql(dAtA, uint64(v8))
	case 1:
		dAtA = encodeVarintPopulateSql(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSql(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSql(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSql(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSql(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Client) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSql(uint64(l))
	}
	return n
}

func (m *Duration) Size() (n int) {
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovSql(uint64(m.Value))
	}
	return n
}

func (m *Server) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovSql(uint64(l))
	}
	return n
}

func (m *Cluster) Size() (n int) {
	var l int
	_ = l
	if len(m.Servers) > 0 {
		for _, e := range m.Servers {
			l = e.Size()
			n += 1 + l + sovSql(uint64(l))
		}
	}
	return n
}

func (m *Database) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovSql(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSql(uint64(l))
	}
	return n
}

func (m *Conn) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSql(uint64(m.Id))
	}
	return n
}

func (m *SQL) Size() (n int) {
	var l int
	_ = l
	if m.ConnId != 0 {
		n += 1 + sovSql(uint64(m.ConnId))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSql(uint64(l))
	}
	return n
}

func (m *Stmt) Size() (n int) {
	var l int
	_ = l
	if m.ConnId != 0 {
		n += 1 + sovSql(uint64(m.ConnId))
	}
	if m.Id != 0 {
		n += 1 + sovSql(uint64(m.Id))
	}
	if m.NumInput != 0 {
		n += 1 + sovSql(uint64(m.NumInput))
	}
	return n
}

func (m *Tx) Size() (n int) {
	var l int
	_ = l
	if m.ConnId != 0 {
		n += 1 + sovSql(uint64(m.ConnId))
	}
	if m.Id != 0 {
		n += 1 + sovSql(uint64(m.Id))
	}
	return n
}

func (m *BoundStmt) Size() (n int) {
	var l int
	_ = l
	if m.ConnId != 0 {
		n += 1 + sovSql(uint64(m.ConnId))
	}
	if m.StmtId != 0 {
		n += 1 + sovSql(uint64(m.StmtId))
	}
	if len(m.NamedValues) > 0 {
		for _, e := range m.NamedValues {
			l = e.Size()
			n += 1 + l + sovSql(uint64(l))
		}
	}
	return n
}

func (m *BoundSQL) Size() (n int) {
	var l int
	_ = l
	if m.ConnId != 0 {
		n += 1 + sovSql(uint64(m.ConnId))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSql(uint64(l))
	}
	if len(m.NamedValues) > 0 {
		for _, e := range m.NamedValues {
			l = e.Size()
			n += 1 + l + sovSql(uint64(l))
		}
	}
	return n
}

func (m *Result) Size() (n int) {
	var l int
	_ = l
	if m.LastInsertId != 0 {
		n += 1 + sovSql(uint64(m.LastInsertId))
	}
	if m.RowsAffected != 0 {
		n += 1 + sovSql(uint64(m.RowsAffected))
	}
	return n
}

func (m *Rows) Size() (n int) {
	var l int
	_ = l
	if m.ConnId != 0 {
		n += 1 + sovSql(uint64(m.ConnId))
	}
	if m.Id != 0 {
		n += 1 + sovSql(uint64(m.Id))
	}
	if len(m.Columns) > 0 {
		for _, s := range m.Columns {
			l = len(s)
			n += 1 + l + sovSql(uint64(l))
		}
	}
	return n
}

func (m *Row) Size() (n int) {
	var l int
	_ = l
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovSql(uint64(l))
		}
	}
	return n
}

func (m *Column) Size() (n int) {
	var l int
	_ = l
	if m.ConnId != 0 {
		n += 1 + sovSql(uint64(m.ConnId))
	}
	if m.RowsId != 0 {
		n += 1 + sovSql(uint64(m.RowsId))
	}
	if m.Index != 0 {
		n += 1 + sovSql(uint64(m.Index))
	}
	return n
}

func (m *NamedValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSql(uint64(l))
	}
	if m.Ordinal != 0 {
		n += 1 + sovSql(uint64(m.Ordinal))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovSql(uint64(l))
	}
	return n
}

func (m *Value) Size() (n int) {
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *Value_Null) Size() (n int) {
	var l int
	_ = l
	if m.Null != nil {
		l = m.Null.Size()
		n += 1 + l + sovSql(uint64(l))
	}
	return n
}
func (m *Value_Int64) Size() (n int) {
	var l int
	_ = l
	if m.Int64 != nil {
		l = m.Int64.Size()
		n += 1 + l + sovSql(uint64(l))
	}
	return n
}
func (m *Value_Float64) Size() (n int) {
	var l int
	_ = l
	if m.Float64 != nil {
		l = m.Float64.Size()
		n += 1 + l + sovSql(uint64(l))
	}
	return n
}
func (m *Value_Bool) Size() (n int) {
	var l int
	_ = l
	if m.Bool != nil {
		l = m.Bool.Size()
		n += 1 + l + sovSql(uint64(l))
	}
	return n
}
func (m *Value_Bytes) Size() (n int) {
	var l int
	_ = l
	if m.Bytes != nil {
		l = m.Bytes.Size()
		n += 1 + l + sovSql(uint64(l))
	}
	return n
}
func (m *Value_String_) Size() (n int) {
	var l int
	_ = l
	if m.String_ != nil {
		l = m.String_.Size()
		n += 1 + l + sovSql(uint64(l))
	}
	return n
}
func (m *Value_Time) Size() (n int) {
	var l int
	_ = l
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovSql(uint64(l))
	}
	return n
}
func (m *Null) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Int64) Size() (n int) {
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovSql(uint64(m.Value))
	}
	return n
}

func (m *Float64) Size() (n int) {
	var l int
	_ = l
	if m.Value != 0 {
		n += 9
	}
	return n
}

func (m *Bool) Size() (n int) {
	var l int
	_ = l
	if m.Value {
		n += 2
	}
	return n
}

func (m *Bytes) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSql(uint64(l))
	}
	return n
}

func (m *String) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSql(uint64(l))
	}
	return n
}

func (m *Time) Size() (n int) {
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovSql(uint64(m.Value))
	}
	return n
}

func (m *Type) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSql(uint64(m.Code))
	}
	return n
}

func (m *TypeName) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSql(uint64(l))
	}
	return n
}

func (m *Token) Size() (n int) {
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovSql(uint64(m.Value))
	}
	return n
}

func (m *Empty) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Error) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSql(uint64(m.Code))
	}
	if m.ExtendedCode != 0 {
		n += 1 + sovSql(uint64(m.ExtendedCode))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSql(uint64(l))
	}
	return n
}

func sovSql(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSql(x uint64) (n int) {
	return sovSql(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Client) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Client{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Duration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Duration{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Server) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Server{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cluster{`,
		`Servers:` + strings.Replace(fmt.Sprintf("%v", this.Servers), "Server", "Server", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Database) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Database{`,
		`ClientId:` + fmt.Sprintf("%v", this.ClientId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Conn) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Conn{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SQL) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SQL{`,
		`ConnId:` + fmt.Sprintf("%v", this.ConnId) + `,`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Stmt) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Stmt{`,
		`ConnId:` + fmt.Sprintf("%v", this.ConnId) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`NumInput:` + fmt.Sprintf("%v", this.NumInput) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tx) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Tx{`,
		`ConnId:` + fmt.Sprintf("%v", this.ConnId) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BoundStmt) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BoundStmt{`,
		`ConnId:` + fmt.Sprintf("%v", this.ConnId) + `,`,
		`StmtId:` + fmt.Sprintf("%v", this.StmtId) + `,`,
		`NamedValues:` + strings.Replace(fmt.Sprintf("%v", this.NamedValues), "NamedValue", "NamedValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BoundSQL) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BoundSQL{`,
		`ConnId:` + fmt.Sprintf("%v", this.ConnId) + `,`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`NamedValues:` + strings.Replace(fmt.Sprintf("%v", this.NamedValues), "NamedValue", "NamedValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Result) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Result{`,
		`LastInsertId:` + fmt.Sprintf("%v", this.LastInsertId) + `,`,
		`RowsAffected:` + fmt.Sprintf("%v", this.RowsAffected) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Rows) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Rows{`,
		`ConnId:` + fmt.Sprintf("%v", this.ConnId) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Columns:` + fmt.Sprintf("%v", this.Columns) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Row) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Row{`,
		`Columns:` + strings.Replace(fmt.Sprintf("%v", this.Columns), "Value", "Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Column) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Column{`,
		`ConnId:` + fmt.Sprintf("%v", this.ConnId) + `,`,
		`RowsId:` + fmt.Sprintf("%v", this.RowsId) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamedValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NamedValue{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Ordinal:` + fmt.Sprintf("%v", this.Ordinal) + `,`,
		`Value:` + strings.Replace(fmt.Sprintf("%v", this.Value), "Value", "Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_Null) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_Null{`,
		`Null:` + strings.Replace(fmt.Sprintf("%v", this.Null), "Null", "Null", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_Int64) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_Int64{`,
		`Int64:` + strings.Replace(fmt.Sprintf("%v", this.Int64), "Int64", "Int64", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_Float64) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_Float64{`,
		`Float64:` + strings.Replace(fmt.Sprintf("%v", this.Float64), "Float64", "Float64", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_Bool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_Bool{`,
		`Bool:` + strings.Replace(fmt.Sprintf("%v", this.Bool), "Bool", "Bool", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_Bytes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_Bytes{`,
		`Bytes:` + strings.Replace(fmt.Sprintf("%v", this.Bytes), "Bytes", "Bytes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_String_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_String_{`,
		`String_:` + strings.Replace(fmt.Sprintf("%v", this.String_), "String", "String", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_Time) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_Time{`,
		`Time:` + strings.Replace(fmt.Sprintf("%v", this.Time), "Time", "Time", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Null) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Null{`,
		`}`,
	}, "")
	return s
}
func (this *Int64) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Int64{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Float64) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Float64{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Bool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Bool{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Bytes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Bytes{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *String) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&String{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Time) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Time{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Type) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Type{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TypeName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TypeName{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Token) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Token{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Empty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Empty{`,
		`}`,
	}, "")
	return s
}
func (this *Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Error{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`ExtendedCode:` + fmt.Sprintf("%v", this.ExtendedCode) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSql(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Client) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Client: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Client: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Duration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Duration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Duration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Server) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Server: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Server: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Servers = append(m.Servers, &Server{})
			if err := m.Servers[len(m.Servers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Database) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Database: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Database: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Conn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Conn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Conn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (ConnID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnId", wireType)
			}
			m.ConnId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnId |= (ConnID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stmt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stmt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stmt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnId", wireType)
			}
			m.ConnId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnId |= (ConnID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (StmtID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInput", wireType)
			}
			m.NumInput = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumInput |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnId", wireType)
			}
			m.ConnId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnId |= (ConnID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (TxID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoundStmt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoundStmt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoundStmt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnId", wireType)
			}
			m.ConnId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnId |= (ConnID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StmtId", wireType)
			}
			m.StmtId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StmtId |= (StmtID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamedValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamedValues = append(m.NamedValues, &NamedValue{})
			if err := m.NamedValues[len(m.NamedValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoundSQL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoundSQL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoundSQL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnId", wireType)
			}
			m.ConnId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnId |= (ConnID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamedValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamedValues = append(m.NamedValues, &NamedValue{})
			if err := m.NamedValues[len(m.NamedValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastInsertId", wireType)
			}
			m.LastInsertId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastInsertId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsAffected", wireType)
			}
			m.RowsAffected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsAffected |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rows) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rows: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rows: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnId", wireType)
			}
			m.ConnId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnId |= (ConnID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (RowsID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Row) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Row: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Row: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &Value{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnId", wireType)
			}
			m.ConnId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnId |= (ConnID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsId", wireType)
			}
			m.RowsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsId |= (RowsID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamedValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamedValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamedValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ordinal", wireType)
			}
			m.Ordinal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ordinal |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Null", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Null{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Value_Null{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Int64{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Value_Int64{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float64", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Float64{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Value_Float64{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Bool{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Value_Bool{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Bytes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Value_Bytes{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &String{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Value_String_{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Time{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Value_Time{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Null) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Null: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Null: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Int64) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Int64: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Int64: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Float64) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Float64: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Float64: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bytes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bytes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bytes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *String) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: String: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: String: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Time) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Time: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Time: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (Type_Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypeName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypeName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypeName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Token) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSql
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedCode", wireType)
			}
			m.ExtendedCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedCode |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSql
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSql
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSql(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSql
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSql(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSql
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSql
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSql
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSql
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSql
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSql(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSql = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSql   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sql.proto", fileDescriptorSql) }

var fileDescriptorSql = []byte{
	// 1230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4b, 0x6f, 0xdb, 0xd6,
	0x12, 0x16, 0x25, 0x3e, 0xa4, 0xf1, 0xe3, 0x1a, 0x07, 0x77, 0x41, 0x28, 0xd7, 0xb4, 0xc3, 0x24,
	0x17, 0x06, 0x6e, 0xae, 0x13, 0xb8, 0x41, 0x10, 0xa0, 0x40, 0x81, 0x48, 0x71, 0x62, 0x01, 0xaa,
	0x53, 0x53, 0x6a, 0x81, 0x16, 0x05, 0x04, 0x4a, 0x3c, 0x56, 0x88, 0x90, 0x3c, 0x0a, 0x79, 0x18,
	0x5b, 0xab, 0x76, 0x5b, 0x74, 0xd3, 0x1f, 0xd1, 0x45, 0x7f, 0x42, 0x97, 0x5d, 0x76, 0x99, 0x65,
	0x57, 0x41, 0xad, 0x6e, 0xba, 0xcc, 0xb2, 0xc8, 0xaa, 0x98, 0x39, 0xa4, 0x1e, 0x79, 0x00, 0x46,
	0xba, 0xd2, 0x99, 0xf9, 0xbe, 0x33, 0xaf, 0x33, 0x9c, 0x11, 0x34, 0xb2, 0x67, 0xd1, 0xfe, 0x24,
	0x15, 0x52, 0xb0, 0x5a, 0xf6, 0x2c, 0x6a, 0xfe, 0x7f, 0x1c, 0xca, 0x27, 0xf9, 0x70, 0x7f, 0x24,
	0xe2, 0x5b, 0x63, 0x31, 0x16, 0xb7, 0x08, 0x1b, 0xe6, 0xa7, 0x24, 0x91, 0x40, 0x27, 0x75, 0xc7,
	0xb5, 0xc1, 0x6c, 0x47, 0x21, 0x4f, 0x24, 0xdb, 0x84, 0x6a, 0x18, 0xd8, 0xda, 0xae, 0xb6, 0xd7,
	0xf0, 0xaa, 0x61, 0xe0, 0xee, 0x42, 0xfd, 0x41, 0x9e, 0xfa, 0x32, 0x14, 0x09, 0xfb, 0x37, 0x18,
	0xcf, 0xfd, 0x28, 0xe7, 0x04, 0xd7, 0x3c, 0x25, 0xb8, 0x2e, 0x98, 0x3d, 0x9e, 0x3e, 0xe7, 0x29,
	0xb3, 0xc1, 0xf2, 0x83, 0x20, 0xe5, 0x59, 0x56, 0x18, 0x28, 0x45, 0xf7, 0x36, 0x58, 0xed, 0x28,
	0xcf, 0x24, 0x4f, 0xd9, 0x0d, 0xb0, 0x32, 0xa2, 0x23, 0xa9, 0xb6, 0xb7, 0x76, 0xb0, 0xb6, 0x8f,
	0xb1, 0x2b, 0x13, 0x5e, 0x89, 0xb9, 0x1f, 0x43, 0xfd, 0x81, 0x2f, 0xfd, 0xa1, 0x9f, 0x71, 0x76,
	0x05, 0x1a, 0x23, 0x8a, 0x6e, 0x30, 0x0f, 0xad, 0xae, 0x14, 0x9d, 0x80, 0x31, 0xd0, 0x13, 0x3f,
	0xe6, 0x76, 0x95, 0xf4, 0x74, 0x76, 0x5d, 0xd0, 0xdb, 0x22, 0x49, 0x58, 0x73, 0x9e, 0xcc, 0x46,
	0x0b, 0x5e, 0xbf, 0xdc, 0x31, 0x51, 0xdb, 0x79, 0x40, 0x89, 0x7d, 0x02, 0xb5, 0xde, 0x49, 0x97,
	0x5d, 0x03, 0x6b, 0x24, 0x92, 0x64, 0xf0, 0x4e, 0x9e, 0x89, 0x90, 0xf2, 0x21, 0xf9, 0xb9, 0x2c,
	0x7d, 0xe0, 0xd9, 0x0d, 0x40, 0xef, 0xc9, 0x58, 0x5e, 0xce, 0x80, 0x0a, 0xa4, 0xba, 0xc0, 0xf1,
	0xaa, 0x0a, 0x04, 0xb3, 0x4b, 0xf2, 0x78, 0x10, 0x26, 0x93, 0x5c, 0xda, 0xb5, 0x5d, 0x6d, 0xcf,
	0xf0, 0xea, 0x49, 0x1e, 0x77, 0x50, 0x76, 0xdb, 0x50, 0xed, 0x9f, 0x5f, 0xce, 0x87, 0xbd, 0xe4,
	0xa3, 0xfe, 0xfa, 0xe5, 0x8e, 0xde, 0x3f, 0x2f, 0x52, 0xfd, 0x4e, 0x83, 0x46, 0x4b, 0xe4, 0x49,
	0x70, 0xf9, 0x80, 0xaf, 0x81, 0x95, 0xc9, 0x98, 0x0a, 0xfe, 0x76, 0xd4, 0x26, 0x42, 0x9d, 0x80,
	0x1d, 0xc0, 0x3a, 0x96, 0x3b, 0x18, 0x50, 0x23, 0x64, 0x76, 0x8d, 0xde, 0xf3, 0x5f, 0xf4, 0x9e,
	0xc7, 0x08, 0x7c, 0x81, 0x7a, 0x6f, 0x2d, 0x99, 0x9f, 0x33, 0xf7, 0x0c, 0xea, 0x2a, 0x94, 0x7f,
	0x50, 0xfb, 0x0f, 0x72, 0xdc, 0x03, 0xd3, 0xe3, 0x59, 0x1e, 0x49, 0x76, 0x1d, 0x36, 0x23, 0x3f,
	0x93, 0x83, 0x30, 0xc9, 0x78, 0x3a, 0xef, 0xa9, 0x9a, 0xb7, 0x8e, 0xda, 0x0e, 0x29, 0xa9, 0x02,
	0x1b, 0xa9, 0x38, 0xcb, 0x06, 0xfe, 0xe9, 0x29, 0x1f, 0x49, 0xae, 0xea, 0x50, 0xf3, 0xd6, 0x51,
	0x79, 0xbf, 0xd0, 0xb9, 0x3e, 0xe8, 0x9e, 0x38, 0xcb, 0x3e, 0xb0, 0x09, 0xf0, 0x6a, 0xd1, 0x04,
	0x36, 0x1a, 0x88, 0xf2, 0x38, 0x51, 0xc9, 0x34, 0xbc, 0x52, 0x74, 0xff, 0x07, 0x35, 0x4f, 0x9c,
	0xb1, 0xeb, 0x0b, 0x82, 0xfa, 0x6c, 0x80, 0xb2, 0x55, 0x89, 0xce, 0xc9, 0x4f, 0xc0, 0x6c, 0xd3,
	0xf1, 0xd2, 0xaf, 0x4c, 0x39, 0xbe, 0x33, 0x2c, 0x13, 0xa1, 0x4e, 0x80, 0x5f, 0x7d, 0x98, 0x04,
	0xfc, 0xbc, 0xe8, 0x4d, 0x25, 0xb8, 0x5f, 0x03, 0x2c, 0x2a, 0x3d, 0xff, 0x08, 0xb5, 0xc5, 0x47,
	0x88, 0x29, 0x89, 0x34, 0x08, 0x13, 0x3f, 0x22, 0xe3, 0x86, 0x57, 0x8a, 0x6c, 0xb7, 0x9c, 0x23,
	0x68, 0x71, 0x35, 0x93, 0x62, 0xa6, 0x7c, 0x5f, 0x05, 0x43, 0x59, 0xde, 0x01, 0x3d, 0xc9, 0xa3,
	0x88, 0x2c, 0xaf, 0x1d, 0x34, 0xd4, 0x13, 0xe7, 0x51, 0x74, 0x54, 0xf1, 0x08, 0x60, 0x2e, 0x86,
	0x27, 0xef, 0xde, 0x21, 0x27, 0xa5, 0xb1, 0x0e, 0x6a, 0x8e, 0x2a, 0x9e, 0x82, 0xd8, 0x1e, 0x58,
	0xa7, 0x91, 0xf0, 0x91, 0xa5, 0x5c, 0xae, 0x13, 0xeb, 0xa1, 0xd2, 0x1d, 0x55, 0xbc, 0x12, 0x46,
	0x77, 0x43, 0x21, 0x22, 0x5b, 0x5f, 0x72, 0xd7, 0x12, 0x82, 0xdc, 0x21, 0x80, 0xee, 0x86, 0x53,
	0xc9, 0x33, 0xdb, 0x58, 0x72, 0xd7, 0x42, 0x0d, 0xba, 0x23, 0x88, 0xdd, 0x00, 0x33, 0x93, 0x69,
	0x98, 0x8c, 0x6d, 0x93, 0x48, 0xc5, 0x84, 0x23, 0xd5, 0x51, 0xc5, 0x2b, 0x40, 0xf4, 0x25, 0xc3,
	0x98, 0xdb, 0xd6, 0x92, 0xaf, 0x7e, 0x18, 0x73, 0xf4, 0x85, 0x40, 0xcb, 0x04, 0x5d, 0x4e, 0x27,
	0xdc, 0x35, 0x41, 0xc7, 0x94, 0xdd, 0x6d, 0x30, 0x28, 0xb1, 0xf7, 0x0c, 0xe2, 0x1d, 0xb0, 0x8a,
	0x8c, 0x56, 0x09, 0x5a, 0x49, 0xf8, 0x0f, 0xe8, 0x98, 0xcb, 0x2a, 0x5a, 0x2f, 0xd1, 0x6d, 0x30,
	0x28, 0x8f, 0x55, 0x78, 0xbd, 0x84, 0x1d, 0x30, 0x55, 0x06, 0xab, 0x78, 0x63, 0xc9, 0x38, 0x06,
	0xff, 0x9e, 0xd8, 0xbe, 0x01, 0xbd, 0x3f, 0x9d, 0x70, 0xe6, 0x82, 0x3e, 0x12, 0x81, 0x02, 0x37,
	0x0f, 0x36, 0x55, 0xce, 0xd3, 0x09, 0xdf, 0x6f, 0x8b, 0x80, 0x7b, 0x84, 0xb9, 0x3d, 0x9c, 0xde,
	0x01, 0x67, 0x0d, 0x30, 0x3a, 0xc7, 0xfd, 0xbb, 0x77, 0xb6, 0x2a, 0x6c, 0x0d, 0xac, 0x87, 0xdd,
	0xc7, 0xf7, 0x51, 0xd0, 0x58, 0x1d, 0xf4, 0xd6, 0xe3, 0xc7, 0xdd, 0xad, 0x2a, 0x32, 0x5a, 0x5f,
	0xf6, 0x0f, 0x7b, 0x5b, 0x35, 0x06, 0x60, 0xf6, 0xfa, 0x5e, 0xe7, 0xf8, 0xd1, 0x96, 0x8e, 0x84,
	0x7e, 0xe7, 0xd3, 0xc3, 0x2d, 0x03, 0x4f, 0xc7, 0x9f, 0x77, 0xbb, 0x5b, 0x26, 0xee, 0x31, 0xf4,
	0x83, 0x3d, 0xfb, 0x9e, 0x04, 0xb6, 0xc1, 0xe8, 0x8b, 0xa7, 0xfc, 0x8d, 0x35, 0xa7, 0x97, 0xb0,
	0x05, 0xc6, 0x61, 0x3c, 0x91, 0x53, 0xf7, 0x2b, 0x30, 0x0e, 0xd3, 0x54, 0xa4, 0xd8, 0xf4, 0xf3,
	0x5c, 0x6a, 0x2a, 0x76, 0x9c, 0x1a, 0xfc, 0x5c, 0xf2, 0x24, 0xe0, 0xc1, 0x80, 0xc0, 0x62, 0x6a,
	0x94, 0x4a, 0x4a, 0xcc, 0x06, 0x2b, 0xe6, 0x59, 0xe6, 0x8f, 0xd5, 0x17, 0xd0, 0xf0, 0x4a, 0xf1,
	0xe0, 0x47, 0x03, 0xac, 0x47, 0xbe, 0xe4, 0x67, 0xfe, 0x94, 0x5d, 0x05, 0xb3, 0xcb, 0xfd, 0x80,
	0xa7, 0x4c, 0x35, 0x19, 0x79, 0x6f, 0x2e, 0x6f, 0x4b, 0xf6, 0x5f, 0xa8, 0x7b, 0x7c, 0x1c, 0xd2,
	0x5e, 0x55, 0x80, 0xda, 0xe2, 0xcd, 0x0d, 0x12, 0xe6, 0x8b, 0xfb, 0x26, 0x34, 0x8e, 0xb8, 0x9f,
	0xca, 0x21, 0xf7, 0xe5, 0x2a, 0x71, 0xbd, 0x10, 0x68, 0x37, 0xbb, 0x95, 0x3d, 0xed, 0xb6, 0x86,
	0x53, 0x01, 0xe7, 0x04, 0x1f, 0x49, 0x56, 0xd8, 0x29, 0x16, 0x71, 0x53, 0xf5, 0x28, 0xad, 0x56,
	0x07, 0xac, 0xcf, 0x52, 0x3e, 0xf1, 0x53, 0xce, 0xea, 0x2a, 0xa4, 0x93, 0x6e, 0x81, 0xd3, 0x96,
	0xb9, 0x02, 0x46, 0x8b, 0x8f, 0xc3, 0x84, 0x2d, 0xee, 0x34, 0x2d, 0xf5, 0xdc, 0xb8, 0xcf, 0xf4,
	0xc3, 0x73, 0x3e, 0x62, 0x9b, 0xc5, 0xf7, 0x55, 0xac, 0xa6, 0x22, 0xb9, 0x62, 0x4c, 0xdf, 0x00,
	0x0b, 0x49, 0xb8, 0x28, 0x36, 0x96, 0x78, 0x27, 0xdd, 0x55, 0x9a, 0x0b, 0xc6, 0x49, 0xce, 0xd3,
	0xe9, 0x5b, 0xc6, 0x94, 0x63, 0x1a, 0xcf, 0x57, 0x40, 0x3f, 0xc6, 0xbd, 0xb1, 0x50, 0x35, 0xeb,
	0xe5, 0x91, 0xdd, 0x04, 0xa6, 0x66, 0x26, 0xf6, 0x47, 0x6f, 0xe4, 0xd3, 0x6f, 0x59, 0x25, 0x02,
	0x0a, 0x53, 0xa4, 0xbf, 0x07, 0xcd, 0x05, 0xbb, 0x2c, 0xcc, 0xbc, 0xb3, 0x56, 0x6e, 0x6d, 0xcc,
	0x6f, 0x11, 0xb6, 0x8d, 0xb3, 0x39, 0x8e, 0x43, 0xc9, 0xca, 0x3a, 0x34, 0xd5, 0xc3, 0xaa, 0xae,
	0xdb, 0x81, 0xba, 0x27, 0xa2, 0x68, 0xe8, 0x8f, 0x9e, 0xbe, 0x49, 0xa0, 0x97, 0x67, 0x57, 0xc1,
	0xf2, 0xf8, 0x48, 0x3c, 0x9f, 0x37, 0x04, 0xdd, 0x5b, 0xa1, 0xb8, 0xd0, 0x68, 0x47, 0x22, 0xe3,
	0xf4, 0x02, 0x8b, 0xc7, 0x78, 0x27, 0x87, 0x0a, 0xb3, 0x54, 0x90, 0x65, 0x8e, 0x03, 0x06, 0x71,
	0x96, 0x1f, 0x6f, 0x09, 0x6f, 0xdd, 0x7b, 0x71, 0xe1, 0x54, 0x7e, 0xbb, 0x70, 0x2a, 0xaf, 0x2e,
	0x1c, 0xed, 0xaf, 0x0b, 0x47, 0xfb, 0x76, 0xe6, 0x68, 0x3f, 0xcd, 0x1c, 0xed, 0xe7, 0x99, 0xa3,
	0xfd, 0x32, 0x73, 0xb4, 0x5f, 0x67, 0x8e, 0xf6, 0x62, 0xe6, 0x68, 0xbf, 0xcf, 0x1c, 0xed, 0xcf,
	0x99, 0x53, 0x79, 0x35, 0x73, 0xb4, 0x1f, 0xfe, 0x70, 0x2a, 0x43, 0x93, 0xfe, 0x6f, 0x7e, 0xf4,
	0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x43, 0x9e, 0x06, 0xb0, 0x0a, 0x00, 0x00,
}
